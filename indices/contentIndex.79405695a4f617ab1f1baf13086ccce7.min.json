{"/":{"title":"Lectern","content":"\nWelcome to the Lectern, [Arash’s](https://arashnrim.me) digital garden meant to share whatever I know with the public in a presentable manner.\n\nI was inspired by the concept of learning in public for a long time now, and I found that making a digital garden could prove to be a viable step forward in showing that. This digital garden may be specific, but I hope that over time, it can grow into something I can look back on and also refer others to.\n\nFeel free to explore more here, and share whatever you know with me as well! If there’s anything that’s factually incorrect that you’re willing to correct, please feel free to contact me.\n\n# What’s here?\n\nThere’s not a lot at the moment, but here’s some tags you could take a look at!\n\n- [Social](tags/social) — notes related to interactions between people or the state of society.\n- [Productivity](tags/productivity) — notes related to the state of putting in work, often related to optimising processes.\n- [Technologies](tags/technologies) — notes related to different technologies, including languages, frameworks, and tools.","lastmodified":"2022-11-07T10:28:46.858868409Z","tags":null},"/mathematics/combination":{"title":"Combination","content":"\nThe arrangement of a given number of items **without the consideration of order**. Not to be confused with [[mathematics/permutation|permutations]], which is similar but with consideration of order.\n\nProvided:\n- the number of distinct items to choose, $n$ (things you have); and\n- the number of combinations, $r$ ('slots' to fill)\n$$\n^nC_r = \\frac {^nP_r} {r!} = \\frac {\\frac {n!} {(n-r)!}} {r!} = \\frac {n!} {r!(n-r)!}\n$$\n\nWhere restrictions are applicable, it is important to deal with them first. Some common restrictions include:\n- the use of binary genders in a group of people.\n\n# Examples\n\n- How many ways are there to select 2 students from a class of 20 students?\n\t- 2 students, 20 students: no detail of order needed\n- How many ways are there to choose 5 students from a class of 20 students to participate in a gaming competition?\n\t- 5 students, 20 students: no detail of order needed\n","lastmodified":"2022-11-07T10:28:46.858868409Z","tags":null},"/mathematics/discrete-probability-distribution":{"title":"Discrete probability distribution","content":"\nA random variable can be discrete if it has:\n- a finite number of values; or\n- an infinite but countable number of values.\n\nA discrete probability distribution, therefore, is the probabity distribution of a discrete random variable. Two common distributions include the:\n- binomial distribution; and\n- Poisson distribution.\n\n# Binomial distribution\n\nA binomial distribution is only valid if four conditions are met (**2pin**):\n- Each trial of the experiment must result in only two (**2**) outcomes (e.g., yes or no; success or failure).\n- The probability (**p**) of a successful outcome is constant for each trial.\n- The trials are independent (**i**) of one another — i.e., the result of one trial does not affect another.\n- There are a finite number (**n**) of trials in the experiment.\n\nIn an experiment of $n$ independent trials,\n- $p$ is the probability of a successful outcome; and\n- $X$ is the random variable.\n\nThe notation to describe a binomial distribution is:\n$$\nX \\sim B (n, p)\n$$\nProvided a binomial distribution, the probability when $X = a$ is denoted by the following formula:\n$$\nP(X = a) = {^n}C_p \\space p^a \\space q^{n-a}\n$$\n(where $q = 1 - p$)\n\nThe expected value or mean of the distribution is denoted by the following:\n$$\nE(X) = np\n$$\nThe variance can be calculated by the following:\n$$\nVar(X) = npq\n$$\n\n# Poisson distribution\n\nA Poisson distribution is only valid if four conditions are met:\n- The event must occur randomly.\n- The probability an event will occur in a certain time interval is proportional to the size of the interval.\n- The number of events occurring in a unit of time is independent of the number of events that occur in other units of time.\n- In a very small interval, the probability that two or more events will occur tends to zero.\n\nA distribution that describes the number of times an event will occur randomly in:\n- a given interval of time; or\n- a given space (e.g., area, volume, weight, distance).\n\nThe notation to describe a Poisson distribution is:\n$$\nX \\sim P_O (\\lambda)\n$$\n(where $\\lambda$ is any number more than zero, often the average for the given time)\n\nProvided a Poisson distribution, the probability when $X = a$ is denoted by the following formula:\n$$\nP(X = a) = e^{-\\lambda} \\space \\frac {\\lambda^a} {a!}\n$$\nThe expected value or mean of the distribution is $\\lambda$.\nThe variance of the distribution is $\\lambda$.\n\n# Poisson approximation to binomial\n\nWhen a binomial distribution has a high number of independent trails ($n$) and a low probability ($p$), we can approximate the binomial distribution into a Poisson distribution.\n\nExpressed mathematically:\nWhen $n \\to \\infty, \\space p \\to 0$\n$$\nX \\sim B(n, p) \\approx X \\sim P_O(np)\n$$","lastmodified":"2022-11-07T10:28:46.858868409Z","tags":null},"/mathematics/number-systems":{"title":"Number systems","content":"\nA system of writing to express numbers. There are many number systems; among the most popular used in academics include:\n- binary;\n- decimal; and\n- hexadecimal.\n\n| Number system | Description |\n|:-:|:-|\n| Binary | A number system with a base of 2 (values either 0 or 1); each place in binary is therefore a power of two |\n| Decimal/Denary | A number system with a base of 10 (values between 0 and 9); each place in decimal is therefore a power of 10 |\n| Hexadecimal | A number system with a base of 16 (values between 0 and F); each place in hexadecimal is therefore a power of 16 |\n","lastmodified":"2022-11-07T10:28:46.858868409Z","tags":null},"/mathematics/permutation":{"title":"Permutation","content":"\nThe arrangement of a given number of items **in a particular order**. Not to be confused with [[mathematics/combination|combinations]], which is similar but without consideration of order.\n\nProvided:\n- the number of distinct items to choose, $n$ (things you have); and\n- the number of permutations, $r$ ('slots' to fill)\n$$\n^nP_r = n \\times (n-1) \\times ... \\times (n-r+1) = \\frac {n!} {(n-r)!}\n$$\n\nWhen there are duplicates, they must be removed. In order to do so, the following formula is used:\n$$\n\\frac {r!} {r_{dup}!}\n$$\nwhere:\n- $r$ is the number of distinct items; and\n- $r_{dup}$ is the number of duplicated items (one for each).\n\nWhere restrictions are applicable, it is important to deal with them first. Some common restrictions include:\n- the use even and odd numbers; and\n- the use of non-zero numbers.\n\n# Examples\n\nThe following are some examples of permutations. Note how order plays a role in each case respectively:\n\n- How many 3-letter word arrangements can be formed from the letters \"A\", \"B\", \"C\", \"D\", and \"E\" in all possible orders with no repetition of letters?\n\t- 3-letter word: 'slots' to fill ($n$)\n\t- letters A to E: distinct items to choose ($r$)\n\t- all possible orders: order matters\n- How many ways are there to arrange the letters in the word \"ELEMENTAL\" with no repetition of letters?\n\t- no repetition of letters: duplicating items need to be removed\n\t- \"ELEMENTAL\": (three) repeated Es, (two) repeated Ls\n- How many ways are there to choose 2 students from a class of 20 students, so as to make the first person a class representative, and the second a class treasurer?\n\t- first class representative, second class treasurer: order matters\n","lastmodified":"2022-11-07T10:28:46.858868409Z","tags":null},"/mathematics/probability":{"title":"Probability","content":"\nA branch of mathematics that examines the possibility of an event to happen. Events are assigned values between 0 (impossible) to 1 (always); many events in real life range in this spectrum.\n\nThe probability of a particular event, $E$, can be calculated through the following formula:\n$$\nP(E) = \\frac {n(E)} {n(S)}\n$$\nwhere:\n- $n(E)$ is the number of outcomes of in $E$; and\n- $n(S)$ is the number of outcomes in the sample space (i.e., the total number of outcomes).\n\n## Using combinations\n\nIn the case where order does not matter, the probability of an event can be calculated using [[mathematics/combination|combinations]. For example, given a question as such:\n\n\u003e There were 9 pens in a box. 2 were black, 3 were red and 4 were blue. If 3 pens were randomly selected, what is the probability that we would get: 1 black pen and 2 red pens?\n\nThe probability can be calculated using combinations as such:\n$$\nP(E) = \\frac {^2C1 \\times ^3C_2} {^9C_3}\n$$\n($^2C_1$ is the probability of getting a black marker and $^3C_2$ is that of getting a 2 red pens. $^9C_3$ is the probability of getting three markers, regardless of colour.)\n\n# Computing probability\n\nGiven two events, Event A and Event B:\n- the probability of **either** (or) event occuring is found by their sum: $P(A \\cup B) = P(A) + P(B)$ \n- the probability of **both** (and) events occuring is found by their product: $P(A \\cap B) = P(A) \\times P(B)$\n\n# Rules\n\nFor the probability of an event to be valid, there are some rules that it should adhere to. The following lists out the rules of probability:\n\n- $0 \\leq P(A) \\leq 1$ for an event A — in other words, probability must be bound between 0 and 1.\n- $\\sum P(A) = 1$ for an event A — in other words, the sum of probability of all outcomes must sum up to 1.\n- $P(A') = 1 - P(A)$ for an event A — in other words, the probability of an event not happening is the different between it and 1.\n\nThere are also rules if certain conditions are met. There are two notable ones, namely:\n\n- [the rule of multiplication of choices](#multiplication-of-choices); and\n- [the rule of addition of choices](#addition-of-choices).\n\n## Multiplication of choices\n\nProvided:\n- a procedure with $k$ stages; or\n- a situation with $k$ factors,\nthe total number of total different ways the procedure can occur is\n$$\nn_1 \\times n_2 \\times ... \\times n_k\n$$\nwhere:\n- $n$ is the number of ways in a stage.\n\n## Addition of choices\n\nProvided:\n- Procedure A, having $m$ ways of doing; and\n- Procedure B, having $n$ ways of doing,\nthe total number of total different ways the procedure can occur is\n$$\nm + n\n$$\n\n# Conditional probability\n\nConditional probability refers to the probability of an event occuring given that another has already occurred. It is a multi-layered form of probability, if you will. Conditional probability is denoted as $P(E | F)$ and read as \"the conditional probability of E, given F\".\n\nTo calculate conditional probability, the following formula is used:\n$$\nP(A|B) = \\frac {P(A \\cap B)} {P(B)}\n$$\nIf the events are independent, then:\n$$\nP(A|B) = P(A)\n$$\n$$\nP(B|A) = P(B)\n$$","lastmodified":"2022-11-07T10:28:46.858868409Z","tags":null},"/productivity/design-thinking":{"title":"Design thinking","content":"\nA thinking process to help with generating and executing an solution for problems. Often utilises [[social/human-centred-design|human-centred design]] to come up with humane and usable solutions. Has five distinct steps to the process:\n\n1. [[social/empathy|Empathise|]]\n\t- Aims to understand the experiences, actions, and feelings experienced by people (e.g., the target audience)\n\t- Conducting interviews to get a sense of what people (e.g., the target audience) care about\n\t- Understand current problems derived from experiences shared during the interviews\n\t- In the design thinking context, explained as \"a deep understanding of the problems and realities of the people you are designing for\"\n2. Define\n3. Ideate\n4. Prototype\n5. Test\n\n## Empathy\nAt this stage, asking questions and interviewing the right audinece is crucial to understanding the issues a group of people face. Through interviews and asking good questions, we can think of pain points or smile points that a person is experiencing; we can then use these points to identify opportunities that we can add on.\n\nIdentifying opportunities is important, as it provides a basis that we can use to think of opportunity statements (i.e., sentences that prompt for idea generation using the structure \"how might we...?\").\n- Opportunity statements tend to have the structure of \"how might we \u003cproblem with user\u003e so as to \u003cimpact\u003e?\"\n\t- Must the target audience clearly in the definition\n\n# Target audiences\n\nIt is important to define target audiences when coming up with ideas using design thinking as it helps us built a solution around the audience rather than building the audience around the solution. It is important to identify the relevant stakeholders or audience for a problem you are empathising for.\n\nIn many cases, these audiences may differ in terms of:\n\n- having different roles (e.g., customers, staff, managers);\n- age ranges with different needs (e.g., youth, adults, elderly);\n- interests; and\n- experience.\n\n# Interacting with the target audience\n\nWhen you have the opportunity to interact with the target audience, it's best that you make the most out of it. Interacting involves getting to know the pain points that the target audience faces, and understanding their experience. You aren't there to judge how they are, but rather to understand why they do what they do. Some tips to interact with your target audience:\n\n- define your audience;\n- spend quality time observing the audience *in context*;\n- ask good questions (e.g., open-ended questions, the 'what-how-why' approach); and\n- observe with a beginner's mindset.","lastmodified":"2022-11-07T10:28:46.862868422Z","tags":null},"/productivity/note-taking-strategies":{"title":"Note-taking strategies","content":"\n## Discerning what's important\n(Notes from [this video](https://www.youtube.com/watch?v=MYJsGksojms))\n- Understand the difference between **conceptual notes** and **sequential notes**\n    - Conceptual notes: atomic and specific notes that extend what you know\n    - Sequential notes: taken in order of presentation (e.g., in class, as a lecturer is teaching)\n- Try to prioritise conceptual notes over sequential notes, since the latter combines your knowledge (both old and new) into one without decaying the older ones\n    - Old notes provide a framework or foundation for making learning new content easier\n- Questions can come up in real-time instead of after class when analysing sequential notes\n- It's too much work to go back and rewrite whatever content the lecturer has gone through; that's likely why we focus on writing sequentially\n\n[[technologies/obsidian|Obsidian]]-specific tips\n- Try not to make a note for the concepts you already know; it's already in your primary database (your mind!)\n- Don't treat this as a big project management project; it is not\n- You're not here to hoard data, you're here to organise your thoughts\n- Try to impose as little structure to your notes","lastmodified":"2022-11-07T10:28:46.862868422Z","tags":null},"/productivity/personal-knowledge-management":{"title":"Personal knowledge management","content":"\nThe process of consolidating and collecting information that can be used to gather, classify, store, search, retrieve, and share knowledge in daily activities\n\n## Methods of PKM\n- Data hoarding — collecting as much information as possible and storing it in a way that can be used in the future; inefficient, as it is time-consuming to come up with data that is unnecessary\n- Zettelkasten method — accumulating 'knowledge clusters' and curating topics according to curiosity\n\n## Common PKM software of today\n- Notion — block-based software that is heavily customisable and flexible; used by many people for different reasons\n- Obsidian — Markdown-based software that aims to identify and strengthen links between ideas","lastmodified":"2022-11-07T10:28:46.862868422Z","tags":null},"/social/empathy":{"title":"Empathy","content":"\nThe ability to see the world through other people's eyes; to step into the shoes of other people and comprehend what they see, feel, and experience. Involves putting aside personal preconceived ideas and choosing to understand the ideas, thoughts, and needs of others instead.\n\nEmpathy involves understanding different perspectives from different target audiences (users). Users may differ through:\n- the roles they play (profiles);\n- different age groups with needs; and\n- different interests.\n\n\n##### Why is empathy important to me?\n\nIn a world where people are unfortunately forced to be self-centred in some capacity, it's important to remember to look out for the people around us. Empathy allows us to connect with one another in a non-superficial and extensive way; instead of just noting the presence of someone, we can share about how they feel, experience, and comprehend life in ways that may be different than us. We get to understand what it's like to be human from another human.\n\nI think empathy requires a little bit of selfllessness in the sense that we need to actively attempt to step out of our lives — the priviliges we have, the ideas that we've had been raised with, and assumptions we have — before we can fully understand someone. There's something poetic to me about genuinely empathising with someone because you care for them.\n","lastmodified":"2022-11-07T10:28:46.862868422Z","tags":null},"/social/human-centred-design":{"title":"Human-centred design","content":"\nA creative approach that aims to factor in people at the centre of the development process. Allows designers and builders to create solutions that resonates with and tailors to a target audience's needs.","lastmodified":"2022-11-07T10:28:46.862868422Z","tags":null},"/social/learning-in-public":{"title":"Learning in public","content":"\nAn extension of [[building in public]], where the individual opens up their learning process for the public to view.[^1]\n\n# Why do I want to learn in public?\n\nI think that learning in public has been something eye-catching for me for one particular reason: transparency. There's something I find comfortable when interacting with people I know are transparent enough to show the ups and downs of their daily lives. As a student myself, I think that one way I can reflect that transparency is to showcase what I've been learning for everyone to see.\n\nThere's definitely an added pressure in that I must be careful of what I expose, and I might also be bound to public scrutiny if I get things wrong. In the long run, though, I think that it's an interesting personal experiment to see what happens. Things are still slow at the moment (as of writing in October 2022), but I wonder where this might go in the future?\n\n[^1] [Why You Should Learn In Public](https://medium.com/my-learning-journal/why-you-should-learn-in-public-4fd3a6239549)","lastmodified":"2022-11-07T10:28:46.862868422Z","tags":null},"/social/peer-helping":{"title":"Peer helping","content":"\nA variety of interpersonal helping behaviours assumed by trained individuals who undertake a helping role with others. Based on the basis that many individuals (especially students) are likely to first turn to their peers for help before approaching a trusted adult. [[Ethics]] and boundaries play an important role in peer helping to protect both the helper and the helpee.\n","lastmodified":"2022-11-07T10:28:46.862868422Z","tags":null},"/social/perception-of-self":{"title":"Perception of self","content":"\nPerceived as the subjective awareness of one's identity of experience.\n\n## What does the self consist of?\nGenerally, the perception of self consists of four things:\n- future self;\n- self needs;\n- self-identity; and\n- personal values and beliefs","lastmodified":"2022-11-07T10:28:46.862868422Z","tags":null},"/tags/productivity/":{"title":"Productivity","content":"","lastmodified":"2022-11-07T10:28:46.862868422Z","tags":null},"/tags/social/":{"title":"Social","content":"","lastmodified":"2022-11-07T10:28:46.862868422Z","tags":null},"/tags/technologies":{"title":"","content":"","lastmodified":"2022-11-07T10:28:46.862868422Z","tags":null},"/tags/technologies/":{"title":"Technologies","content":"","lastmodified":"2022-11-07T10:28:46.862868422Z","tags":null},"/technologies/computers/basic-input-output-system":{"title":"Basic input/output system","content":"\nA computer program, firmware, or microprocessor of a computer that is used to start the computer when powered on. Commonly abbreviated as BIOS. Stored in the non-volatile random access memory (NVRAM) of a computer, usually a complementary metal semiconductor (CMOS). The BIOS includes low-level code that:\n\n- initiates and enable communications with hardware devices;\n- performs the [[technologies/computers/power-on-self-test|power-on self test (POST)]] to test the computers components (including the CPU, memory, storage, and input devices); and\n- loads an operating system that interfaces with the user.","lastmodified":"2022-11-07T10:28:46.862868422Z","tags":null},"/technologies/computers/central-processing-unit":{"title":"Central processing unit","content":"\nA component that processes data according to a set of instructions. Often abbreviated as CPU. Clock speeds are measured in gigahertz (GHz); the faster the clock speed, the faster the performance. Has three distinguishable units within the CPU:\n\n- [arithmetic logic unit](#arithmetic-logic-unit) — processes data by performing basic mathematical and logical operations;\n- [control unit](#control-unit) — follows instructions and decides when data should be stored, received, or transmitted by different parts of the computer; and\n- registers — small and temporary storage used by the processor to temporarily store data.\n\nModern CPUs are often faster because of having more packed within them. A core has two logical processors within them; modern CPUs tend to have eight cores (therefore 16 logical processors).","lastmodified":"2022-11-07T10:28:46.862868422Z","tags":null},"/technologies/computers/computer":{"title":"Computer","content":"\nAn electronic device that operates under the control of **instructions stored in memory** that can **accept data** and **process them** according to a set of instructions before producing results and storing them for future use.\n\n# Components\n\nGenerally, computers have several components that play different roles within the computer:\n\n- [[technologies/computers/central-processing-unit|central processing unit]] (CPU) — a component that processes data according to a set of instructions;\n- memory — data, instructions, and results to be used in the short-term;\n\t- [[technologies/computers/random-access-memory|random access memory]] (RAM) — a component that stores data, instructions, and results for immediate use;\n\t- [[technologies/computers/read-only-memory|read-only memory]] (ROM) — a component that stores data and instructions that rarely need to change or are required for start-up;\n- [[technologies/computers/input-device|input devices]] — a hardware device that allows users to enter data and instructions into a computer;\n- [[technologies/computers/output-devices|output devices]] — a hardware device that is used to show processed results from a computer in a  human-friendly way (i.e., can be understood by people); and\n- [[technologies/computers/secondary-storage|(secondary) storage]] — a device that stores data, instructions, and information (often in large amounts) that will not be lost on power supply interruption\n","lastmodified":"2022-11-07T10:28:46.862868422Z","tags":null},"/technologies/computers/computer-architecture":{"title":"Computer architecture","content":"\nDescribes how a [[technologies/computers/computer|computer]] is designed and built to function, including how parts of the computer are designed, organised, and connected.\n\n# von Neumann computer architecture\n\nThere may be many kinds of computer architecture, but a popular one (that is used in current studies) is the von Neumann computer architecture. The architecture describes a computer with the following components:\n\n- a [[technologies/computers/central-processing-unit|central processing unit]] with both an arithmetic logic unit and registers;\n\t- control units that include an instruction register and program counter;\n- memory to store data and instructions;\n- external [[technologies/secondary-storage|secondary storage]]; and\n- input and output mechanisms.\n\nGenerally, the architecture also defines the use of buses (collections of wires used as a medium to transport data from one part of a computer to another). There are three buses that are used in this architecture:\n\n- Data bus: A bidirectional (two-way) bus that is mainly used to transport data between the memory, I/O devices, and processor\n- Address bus: A unidirectional (one-way) bus that is mainly used to transport address information usually from the processor to memory\n- Control bus: A bidirectional (two-way) bus that is mainly used to transport control signals and clock pulses","lastmodified":"2022-11-07T10:28:46.862868422Z","tags":null},"/technologies/computers/device-management":{"title":"Device management","content":"\nDevices connected to a computer are managed by connections to the processor. There are two parts to device management, particularly the hardware aspect ([device controller](#device-controller)) and software aspect ([device driver](#device-driver)).\n\n# Device controller\n\nA system that handles the incoming and outgoing signals of the CPU. Connected to the computer via a plug and socket, of which the socket is connected to the controller. Controllers come in embedded and external forms.\n\nSome devices may have device controllers built within them. Common devices with such include external storages and speakers.\n\n# Device driver\n\nA program that controls a particular type of device attached to a computer. Translates computer code to instructions the device can comprehend.\n","lastmodified":"2022-11-07T10:28:46.862868422Z","tags":null},"/technologies/computers/memory-management":{"title":"Memory management","content":"\nRefers to the allocation of resources to each program by the [[technologies/computers/operating-system|operating system]]. Heavily involves the [[technologies/computers/random-access-memory|random access memory]] as a resource used by programs as a working space.\n\nA memory manager has several tasks in particular:\n- allocating portions of the main memory to various programs at their request;\n- freeing portions of the main memory when no longer needed;\n- keeping track of the status of each location of the main memory; and\n- protecting the memory allocated to a program from unauthorised access by other programs.\n\nThe [[technologies/computers/operating-system-kernel|kernel]] is the part of the operating system always in the RAM as long as the computer is turned on.\n\n# Memory address\n\nA location, often in the form of a binary number, located on the memory. It can be referenced to access the content stored in-memory at that particular location. Starts from 0 to a maximum number defined by the amount of RAM in the computer.\n\nTo calculate the range of an address space provided the amount of RAM, given that $b$ is the number of bytes, find the number of bits $n$ by using $\\frac {log(b)} {log(2)}$ and use that to find the maximum value ($n$ `F`s).\n\nThe number of bits an address has is dependent on the [[technologies/computers/computer-architecture#von Neumann computer architecture|address bus]]'s width.\n\n# Memory content\n\nA particular address can store **eight bits** (one byte) of information; this information could be either a part of an instruction or data.\n\n# Frames, pages, and page tables\n\nFrames refer to compartments brought about due to the *physical* memory's storage. Pages, on the other hand, are *virtual* and refer to references created by the CPU.\n- The typical size of a frame is **4096 bytes** (4 KiB).\n- The size of a frame **must match** the size of the page.\n- Expressed differently, data or instructions are stored in the memory as frames. When the CPU references and reads or writes the memory, the CPU handles them as pages.\n\n## Page tables\n\nTo bridge the link between frames and pages, memory managers often create a page table for each process. Page tables are data structures used by the memory manager to keep track of which page corresponds to which frame.\n\nPage tables include a valid or invalid control bit which is used to tell whether or not a page is in the physical memory. In the case of demand paging, where data can be stored on the secondary storage temporarily, the control bit will be 0 (demarking it as not in the physical memory).\n\n# Logical and physical memory\n\nThe logical memory is the memory as seen as pages (i.e., seen by the CPU). The logical memory stores pages by the CPU and can be purged at any time.\n\nThe physical memory is the memory stored as-is physically, and is seen as frames.\n\n# Virtual memory and demand paging\n\nMultiple programs may be loaded into the physical memory at once (in [[technologies/computers/operating-system#Multi-tasking and multi-user OSs|multi-tasking operating systems]]). The total memory size required by the OS and all the programs may exceed the physical memory size; in this event, the OS uses virtual memory to compensate. This space is known as a swap space; on Linux, this space is a partition called `swap` while on Windows, this space is in a file named `pagefile.sys`.\n- This method makes use of the available space on the secondary storage to store programs.\n- The OS moves inactive data from the physical memory to the temporary space in the secondary storage.\n- The memory manager than swaps data to and fro the storage and memory when required.\n\nTrashing refers to the excessive swapping of pages and data between the memory and secondary storage; this causes the program to operate more slowly.","lastmodified":"2022-11-07T10:28:46.862868422Z","tags":null},"/technologies/computers/operating-system":{"title":"Operating system","content":"\nA collection of software that manages computer hardware resources and provides common services for application software. Designed to support a [[technologies/computers/computer|computer]]'s basic functions. Often provides a [[technologies/graphical-user-interface|graphical user interface]] for the user to interact with the OS.\n\n# Kinds of OSs\n\n## Type of OS\nOften comes as two kinds of operating systems:\n- desktop operating systems — installed on personal computers meant to be used by one person at a time; and\n\t- the Windows and macOS families of operating systems are examples of desktop OSs\n- server operating systems — installed on more powerful computers (servers) connected to a network and sets out rules enabling multiple users to access information.\n\t- the Windows Server family of operating systems are examples of server OSs\n\n## Open source?\nOperating systems may also vary in whether they are [[technologies/open-source|open source]]; the Linux OS and most distributions based off it are open-source, whereas Windows and macOS are examples of proprietary OSs.\n\n## Multi-tasking and multi-user OSs\nA multi-tasking OS allows more than one program to run at the same time in a computer. Users will be able to:\n- do multiple tasks at the same time;\n- switch between different active applications; and\n- transfer data from one application to another.\n\nA multi-user OS allows multiple users concurrently logging into the computer. The OS will need to handle:\n- fair treatment of users with similar privileges;\n- give priority to superusers;\n- the privacy of users' files and data sharing storages; and\n- the protection of integrity of each user's programs and data from:\n\t- malicious attempts by others; or\n\t- accidental mistakes from others.\n\nBased on the definitions above:\n| Operating System | Is a multi-user OS? | Is a multi-tasking OS? |\n|:-:|:-:|:-:|\n| Windows | No | **Yes** |\n| Windows Server | **Yes** | **Yes** |\n| macOS | **Yes** | **Yes** |\n| UNIX | **Yes** | **Yes** |\n| Linux | **Yes** | **Yes** |\n\n# How it works\n\nOperating systems work with other components in a computer to fully make use of a computer's resources and function well. These components include:\n- the [[technologies/computers/basic-input-output-system|basic input/output system (BIOS)]];\n- the operating system's [[technologies/computers/operating-system-kernel|kernel]] and\n- [[technologies/computers/device-management|device drivers]].\n\n# Functions\n\nGenerally has four important functions:\n\n| Function | Description |\n|:-|:-|\n| File management | Handles file-related activities (e.g., storage, retrival, naming, sharing) |\n| Process management [^1] | Handles the creation and destruction of processes and provides mechanisms for synchronisation and communication across processes |\n| Memory management | Handles the allocation and deallocation of memory space to programs |\n| Device management | Handles the management of I/O devices |\n\n[^1]: Related: [[technologies/computers/process-management|process management]]","lastmodified":"2022-11-07T10:28:46.862868422Z","tags":null},"/technologies/computers/operating-system-kernel":{"title":"Operating system kernel","content":"\nA collective name applied to core services provided by an operating system that performs functions like process, memory, and device management.","lastmodified":"2022-11-07T10:28:46.862868422Z","tags":null},"/technologies/computers/power-on-self-test":{"title":"Power-on self-test","content":"\nA set of routines performed by firmware or software immediately after a computer is powered on. Used to determine if hardware is working as expected. The power-on self test performs the following:\n\n- verification of CPU registers;\n- verification of the BIOS's code integrity;\n- verification of some basic components (direct memory access, timer, and interrupt controller);\n- initialisation, sizing, and verifiation of system main memory;\n- initialisation of BIOS;\n- passing of control to other specialised extension BIOSs; and\n- identification, organisation, and selection of devices available for booting.\n\nThe checks usually test the following components:\n\n- hardware components (e.g., the processor, storage devices, and memory);\n- basic system devices (e.g., keyboard and peripheral devices);\n- CPU registers;\n- direct memory access;\n- timers; and\n- interrupt controllers.\n","lastmodified":"2022-11-07T10:28:46.862868422Z","tags":null},"/technologies/computers/process-management":{"title":"Process management","content":"\nThe state of managing active processes running in a computer system. \n\n# Terminologies\n\n| Term | Definition |\n|:-:|:-|\n| Arrival time (AT) | The time a process arrives at the ready queue |\n| Burst time (BT) | The estimated time for the CPU to execute a process |\n| Finish time (FT) | The absolute time a process has finished executing |\n| Turnaround time (TT) | The total time between a process's arrival time and finish time ($TT = FT - AT$) |\n| Waiting time (WT) | The total time a process waits to be executed ($WT = TT - BT$) |\n| Throughput | The number of processses completed per unit time |\n\n# Scheduling schemes\n\nA process scheduler is a component that arranges and queues processes to be executed by a single CPU. Its main roles are to:\n- refer to built-in policies and procedures to decide which processes to run first and which processes to be given the chance to finish first; and\n- be responsible for scheduling the next process in the ready queue to be executed.\n\nDifferent managers will schedule and execute processes in different scheduling schemes that they support. Popular schemes include:\n- first-come first-serve (FCFS);\n- round robin (RR);\n- shortest job next (SJN); and\n- shortest remaining time first (SRTF).\n\n| Scheme | Definition |\n|:-:|:-|\n| First-come first-serve | A scheduling algorithm where tasks are enqueued and the process at the front of the queue is run. |\n| Round robin | A scheduling algorithm similar to first-come first-serve, but rotates across the processes. |\n\n## Allocation schemes\n\nAllocation schemes have a direct impact on the effeciency of the CPU. No single allocation scheme is optimal; each has its own design goals. There are two kinds of allocation schemes:\n- non-preemtive, where a process's execution is not allowed to be interrupted; and\n\t- example: FCFS\n- preemptive, where a process's execution is allowed to be interrupted.\n\t- example: RR\n\n# States\n\nProcesses can exist in four different states:\n\n- ready state;\n\t- processes in this state are ready for execution by the CPU. In this instance, they are placed in a ready queue\n\t- some processes may be returned to the ready state after running or waiting before execution is completed\n- waiting state;\n\t- processes in this state are put on hold, often waiting for some part of the OS to respond to a request by the process\n\t- not a mandatory state\n- running state; and\n\t- processes in this state are being actively executed by the CPU\n\t- processes may move on or back to the finished, ready, or waiting state depending on the context\n- finished state.\n\t- processes in this state have been executed. System resources it was allocated with are released, and the process terminates\n\n# Commands\n\n| Windows | Linux | Description |\n|:-:|:-:|:-|\n| `tasklist` | `ps` | Lists the curerntly running processes in a computer |\n| `taskkill` | `kill` | Stops (kills) a running process, usually the given process |\n","lastmodified":"2022-11-07T10:28:46.862868422Z","tags":null},"/technologies/computers/random-access-memory":{"title":"Random access memory","content":"\nA component that stores data and instructions temporarily so that they can be quickly accessed by the [[technologies/computers/central-processing-unit|processor]] when needed. Also a resource used by programs as a working space.\n\n\n\n\n\n\n","lastmodified":"2022-11-07T10:28:46.862868422Z","tags":null},"/technologies/computers/server":{"title":"Server","content":"\nSpecialised [[technologies/computers/computer|computers]] that are performant and designed to be accessed remotely by multiple users (often in the thousands) at once. Have the ability to control hardware, software, and other resources in a network while providing centralised storage for programs, data, and information.\n\nHas several kinds, the common ones being:\n- tower servers;\n- rack servers; and\n- blade servers.\n","lastmodified":"2022-11-07T10:28:46.862868422Z","tags":null},"/technologies/data-typing":{"title":"Data typing","content":"\nThe process of assigning a type to a particular variable or value. Often done to:\n\t- dynamically allocate a certain amount of memory (for instance, `double` allocates twice as many bits as `float`); and\n\t- restrict operations (as some operations, like division, can only be done for certain types).\n\nDifferent languages can have different data types, but the common few include:\n\n| Data type | Used for |\n|:-:|:-|\n| integer | Whole numbers |\n| float | Numbers with a floating point decimal |\n| character | Any kind of character |\n| string | A chain of characters |\n| Boolean | True or false values |\n| list/array | A collection of data types |\n\nIn some low-level languages (e.g., the C family of languages), there may be additional data types to handle assigning different amounts of bits (usually 16, 32, and 64 bits). Common types include:\n\n| Data type | Related data type | Bit size | Amount held |\n|:-:|:-:|:-:|:-|\n| byte | integer | 8 | 256 (0–255 unsigned, -128–127 signed) |\n| short | integer | 16 | 65536 (0–65535 unsigned, -32768–32767 signed) |\n| long | integer | 32 | 4294967296 (0—4294967295 unsigned, -2147483648–2147483647 signed) |\n| double | float | 64 | | \n","lastmodified":"2022-11-07T10:28:46.862868422Z","tags":null},"/technologies/databases/database-design":{"title":"Database design","content":"\nThe process of coming up with entities and models to be used in a future database. Considered a critical process in the planning and development of a database for use.\n\n# Terminologies\n\n| Term | Definition |\n|:-:|:-|\n| Entity | An object (e.g., people and items) of which is to be captured and modelled into a database |\n| Attribute | A property or characteristic of an entity that is of interest to the organisation or business area (that the database is being built for) |\n| Relationship | An association between the instances of one or more entities of interest to the organisation |\n\n\u003e **Example**\n\u003e For a Salesperson entity, the employee number, name, date of birth, gender, and email address are examples of relevant attributes to the person.\n\n# Keys\n\nKeys are used to identify a record in a table. They are unique to each record and there are different kinds of keys:\n\n- Candidate key — an attribute that uniquely identifies a tuple in a relation\n- Primary key — a chosen candidate key used to uniquely identify each tuple. A primary key requires two requirements and two recommendations:\n\t- the value of the primary key should be consistent (unchanged) over time;\n\t- the value of the primary key must be non-null;\n\t- intelligent keys (keys with structures indicating the likes of classifications or locations) should be avoided; and\n\t- surrogate keys should be considered as a possible substitution.\n- Alternate key — a candidate key that was not chosen as the primary key of the record\n- Foreign key — an attribute used to create a relationship with another relation (table) within the database\n- Composite key — a key that consists of more than one attribute\n\t- In some instances, one primary key is not enough (e.g., the ISBN of a book is insufficient as a library may hold multiple copies of the same book)\n- Surrogate key — a new attribute specifically introduced into an entity to serve as the primary key\n\t- Often used when a natural identifier cannot be used to guarantee the uniqueness of each tuple\n\t- When the primary key is a composite key with many attributes, it is suggested to use a surrogate key in its place\n\n# Models\n\nConceptual database models are used to give a brief overview of what entities a database has and the relationships the entities have with each other. Like flowcharts, shapes resemble different things in the model.\n\nThe [[technologies/databases/entity-relationship-model|entity-relationship model (ER model)]] is a commonly used model used to sketch out and visualise the relationships entities have with one another in a database.","lastmodified":"2022-11-07T10:28:46.862868422Z","tags":null},"/technologies/databases/databases":{"title":"Databases","content":"\nCan be defined as organised collections of data. Generally more advantageous compared to spreadsheets, given that they have:\n\t- a fast and easy setup;\n\t- more storage;\n\t- has built-in tools to see all data at a glance;\n\t- support for encryption; and\n\t- the ability to faciltiate multiple connections at once.\n\n# Terminologies\n\n| Term | Definition |\n|:-:|:-|\n| Tables | Collections that hold data about a particular subject (e.g., entity, object in warehouse); generally organised into rows (records) and columns (fields) |\n| Record | A row in a table. Typically includes information about one of several counts of a subject (e.g., a person in a persons table) |\n| Field | A column in a table. Typically includes key information about the subject (e.g., the name, email address, and phone number of a person in a persons table) |\n\n# Conventions\n#### Table names\n- Lowercase and not include spaces (underscores instead)\n- Should refer to a collective group or be plural\n\n#### Field names\n- Lowercase and not include spaces (underscores instead)\n- Should be singular, unique, and different from the table name\n\n# [[technologies/data-typing|Data typing]]\nSome instances of databases (for example, the [[technologies/databases/sql|SQL]] family of databases) tend to use data typing to streamline the developer experience and prevent errors (such as invalid field names provided by the developer). For these cases, view the particular database page.\n\n# Application lifestyle\n\nGenerally has seven stages that needs to be gone through to execute the creation of a database. They include:\n\n1. Database planning — defining the mission statement of the database (what does the database want to solve/store?)\n2. System definition — identifying system boundaries\n3. Analysis — collecting and analysing information (e.g., from the current data available)\n4. Database design — creating a plan/model that uses previous steps to meet the requirements\n\t- Conceptual database design — creating models and entities\n\t- Logical database design — mapping entities to relations\n\t- Physical database design — creating relations between tables\n5. Implementation\n6. Testing\n7. Operational maintenance\n","lastmodified":"2022-11-07T10:28:46.862868422Z","tags":null},"/technologies/databases/entity-relationship-model":{"title":"Entity-relationship model","content":"\nA database visualisation model that describes interrelated things of interest in a specific domain of knowledge. Provides a detailed and logical representation of the data in a database.\n\n# Terminologies\n\n| Term | Definition |\n|:-:|:-|\n| Simple/Atomic attribute | An attribute that cannot be further divided into smaller attributes |\n| Composite attribute | An attribute that is made up of multiple components, each with an independent existence |\n| Single-valued attribute | An attribute that holds only a single value for a single entity (e.g., name, gender, ID) |\n| Multi-valued attribute | An attribute that holds multiple values for a single entity (e.g., phone numbers, qualifications) |\n| Derived attribute | An attribute that represents a value derivable from the value of related attributes | \n\n# Symbols\n\n| Symbol | Representation |\n|:-:|:-|\n| Rectangle | Entity (singular) |\n| Concentric rectangle | Weak entity (singular) |\n| Oval | Simple/Composite single-valued attribute; underlined attributes represent primary keys |\n| Concentric oval | Single/Composite multi-valued attribute |\n| Dotted oval | Derived attribute |\n| Diamond | Relationship (verb) |\n\n# Relationships\n\n## Degrees of relationships\nRelationships can have different degrees to show in an ER model. Common degrees include the:\n- unary (one) degree;\n- binary (two) degree; and\n- ternary (three) degree.\n\n### Unary relationships\nRepresents the relationship between instances of a single entity. Also known as a recursive relationship.\n\n- It is important to assign a role name that signifies the function a participating entity plays in each relationship; this allows you to distinguish the meaning of each participation\n\n### Binary relationships\nRepresents the relationship between instances of two entities. Is the most common type of relationship encountered in data modelling.\n\n### Ternary relationships\nRepresents the relationship among instances of three entities.\n\n## Constraints\nRelationships can be constrained such that only certain cases are valid in a database. This helps to plan out a database in greater detail.\n\n### Cardinality ratio\nRefers to the number of instances of an entity that can be associated with an instance of another entity. The three most commonly-used cardinality ratios used in databases include:\n- one-to-one (1:1) relationship;\n\t- example: one staff member supervising one branch\n- one-to-many (1:M) relationship; and\n\t- example: one book publisher publishing many books\n- many-to-many (M:N) relationship.\n\t- the 'N' is used to differentiate the letters, but still means many. Can be ignored (don't need to change)\n\t- example: many students taking many subjects","lastmodified":"2022-11-07T10:28:46.862868422Z","tags":null},"/technologies/databases/sql":{"title":"SQL","content":"\nAbbreviated term for Structured Query Language, often pronounced as 'sequel'. Used as a language used in [[technologies/databases/databases|databases]] to query for data according to specified instructions by the language. Used to create, query, and update relational databases.\n\n# Terminologies\n\n| Term | Definition |\n| :-:|:-|\n| Result set | The produced data after processing a query |\n| View | A table that is a saved result set |\n| Virtual table | Not a table in the database, but the query code is saved instead |\n| Null | A value that is unknown, not available, or not applicable |\n| Tuple | A term usually synonymous with a record in a table |\n| Relation | A term usually synonymous with a table |\n\n# Statements and functions\n\n## Statements\n| Statement | Description |\n|:-:|:-|\n| `SELECT` | Selects the given fields from a database |\n| `SELECT ... FROM ... WHERE` | Selects the given fields from a database, provided the conditions provided are true |\n| `FROM` | Specifies which table should data be retrieved from |\n| `AS` | Aliasing a field name in the query |\n| `DISTINCT` | Filters a field and removes duplicate values |\n| `CREATE VIEW` | Creates a new view |\n| `ORDER BY ... ASC` or `ORDER BY ... DESC` | Sorts a field in ascending or descending order |\n| `LIKE` | Performs pattern match searching; often `%` is used in conjunction to select zero or more characters |\n| `IN (...)` | Checks if the condition matches one of the items in a given list (similar to concatenating multiple `OR`s) |\n| `BETWEEN ... AND ...` | Checks if the condition is between the two given items; often used with dates |\n| `AND` | Concatenates conditions together such that both must be true to pass |\n| `OR` | Concatenates conditions together such that at least one must be true to pass |\n| `NOT` | Inverses a condition |\n\n## Functions\n- Scalar functions: functions that produces an output for each row of input\n- Aggregate functions: functions that accept values from multiple rows and produces an output\n\n### String functions\n\n| Function | Kind | Description |\n|:-:|:-:|:-|\n| `LOWER` | Scalar | Converts a string to lowercase |\n| `UPPER` | Scalar | Converts a string to uppercase |\n| `REPLACE` | Scalar | Replaces a string with another given value |\n| `STR` | Scalar | Converts a numeral into a string |\n| `SUBSTRING` | Scalar | Returns part of a string |\n\n### Mathematical functions\n\n| Function | Kind | Description |\n|:-:|:-:|:-|\n| `CEILING` | Scalar | Returns the next integer of a given number |\n| `FLOOR` | Scalar | Returns the previous integer of a given number |\n| `ROUND` | Scalar | Rounds up a number to a given number of decimal places |\n| `COUNT` | Aggregate | Returns the number of items in a group |\n| `MIN` | Aggregate | Selects the minimum value in a set of values |\n| `MAX` | Aggregate | Selects the maximum value in a set of values |\n| `AVERAGE` | Aggregate | Returns the average value in a set of values |\n| `SUM` | Aggregate | Returns the sum of all values in a set of values |\n\n### datetime functions\n\n| Function | Kind | Description |\n|:-:|:-:|:-|\n| `DATEADD` | Scalar | Adds a given interval to a date |\n| `DATEDIFF` | Scalar | Returns the difference between two dates |\n| `GETDATE` | Scalar | Gets the current date |\n| `DAY` | Scalar | Returns an integer of the day of the date |\n| `MONTH` | Scalar | Returns an integer of the month of the date |\n| `YEAR` | Scalar | Returns an integer of the year of the date |\n| `FORMAT` | Scalar | Returns a date as a string in the given format |\n\n### System functions\n\n| Function | Kind | Description |\n|:-:|:-:|:-|\n| `FORMAT` | Scalar | Returns a value formatted with the given format |\n| `ISNULL` | Scalar | Replaces `NULL` values with a given value |\n\n# Logical operators\n\n| Operator | Operation |\n|:-:|:-|\n| `=` | equality |\n| `!=` or `\u003c\u003e` | not |\n| `\u003c` | less than |\n|  `\u003c=` | less than or equal to |\n| `\u003e` | greater than |\n| `\u003e=` | greater than or equal to |\n\n# Data types\nOften [[technologies/data-typing|data typed]] and store a particular piece of required information; common data types include:\n\n| Data type | Used for |\n|:-:|:-|\n| `VARCHAR` | A variable-length string; can be used for anything ranging from an individual character to a string of thousands of characters. |\n| `INTEGER` or `INT` | A medium-sized integer (32-bits) |\n| `BOOL` | Boolean |\n\n# Best practices\n- End off queries with a semicolon to denote that the query is complete\n\t```sql\n\tSELECT name\n\tFROM patrons;\n\t```","lastmodified":"2022-11-07T10:28:46.862868422Z","tags":null},"/technologies/markdown":{"title":"Markdown","content":"\nA lightweight markup language for creating formatted text using plain-text editors. Grown reasonably ubiquitous for its extensive use case (e.g., storing large textual content) in a way that is standard and easy to understand.\n\n## Syntax\n\n| Symbol | Description |\n|:-------:|:------------|\n| `** **` or `* *`  | Bold        |\n| `* *` or `_ _`   | Italicise   |\n| `~ ~` | Strikethrough |\n| `[title](https://example.com)` | Link |\n| `#` to `######` | Headings (H1 to H6) |\n| `-` | List items (non-ordinal)\n| `1.` to `n.` | List items (ordinal)","lastmodified":"2022-11-07T10:28:46.862868422Z","tags":null},"/technologies/obsidian":{"title":"Obsidian","content":"\nA [[technologies/markdown|Markdown]]-based note-taking app centred around keeping distinct ideas connected through identifying relationships they share with one another. Marketed as \"a second brain, for you, forever\". Featuring a vault-like system for organisation with pure Markdown files, assuring that [[data]] won't be lost if Obsidian eventually shuts down (since it's a [[technologies/open-source|closed source]] service), it is a form of [[productivity/personal-knowledge-management|personal knowledge management]].\n\n## How should I use Obsidian?\n* As much as possible, each note within Obsidian should be atomic in its own right, meaning that each page is for a specific item to talk about\n* **Don't try to force yourself to think of more things for a nice graph view.** The more you do it, the more you'll eventually tire yourself out\n\n## Personal opinion\n- Pretty cool that backlinking is easy, and that relationships between notes are prioritised (described as \"links being first-class citizens\" by Obsidian)","lastmodified":"2022-11-07T10:28:46.862868422Z","tags":null},"/technologies/open-source":{"title":"Open source","content":"\nA term used to initially refer to software or hardware with source code that is publically accesible. Currently has expanded its scope of definition, ranging from software to a movement and way of working. Current definitions to open source by the [Open Source Initiative](https://opensource.org/osd) include additional restraints, including:\n\n- free redistribution, where open-source products must not require a royalty or other fee;\n- having open source code, where distribution must be allowed in source code and the compiled form,\n- allowing derived works, where open-source products must be allowed modifications and derived works by other authors, and more.\n\n# Licencing\n\nLicencing plays a big role in open source; developers who write products must assign a relevant licence to be considered an open-source product. Licences restrict what authors who make deriviations from an original open-source product can or cannot do, including governing the use of copyright, distribution ability, and rights.\n\nCommon open source licences can be found on [ChooseALicense.com](https://choosealicense.com/), a guide-like website made by GitHub to help developers pick an appropriate licence for their projects.\n","lastmodified":"2022-11-07T10:28:46.862868422Z","tags":null},"/technologies/programming/class":{"title":"Class","content":"\nA blueprint for creating objects, often a feature of many object-oriented programming languages.\n\n# Attributes and variables\n\nMore or less an interchangeable term used to describe low-level storage slots attached to an object.\n\n## Properties\n\nIn most OO languages, properties are used to define getter and setter functions to change the value of or read and return the value of an attribute in a class. The way properties are defined varies across programming languages.\n\n- C#\n```c#\nclass SavingsAccount\n{\n\t// Variables are made private to prevent illegal accessing out of the object\n\tprivate string accountNo;\n\tpublic string AccountNo\n\t{\n\t\tget { return accountNo; }\n\t\tset { accountNo = value; } // Can be extended to have additional checks or validation\n\t}\n\t\n\tprivate string accountName;\n\tpublic string AccountName { get; set; } // Shorthand\n}\n```\n\n# Methods\n\nThere are three types of methods in a user-defined class:\n- constructors — used to create objects of a class;\n- user-defined methods — used to perform a specific task related to the class; and\n- printing methods — used to print out the class in a particular format when called by the programming language's print function.\n\n## Constructors\n\nA special function used to create objects of a class. Usually a required method in many OO programming languages.\n\nThe following code chunks below show some examples for different languages:\n\n- C#\n```c#\nclass SavingsAccount {\n\t// The name of the class and constructor must match.\n\t// Default constructor — does not have parameters\n\tpublic SavingsAccount() { }\n\t\n\t// Parameterised constructor with parameters\n\tpublic SavingsAccount(string no, string name, double bal)\n\t{\n\t\tAccountNo = no;\n\t\tAccountName = name;\n\t\tBalance = bal;\n\t}\n}\n```\n- Python\n```python\nclass SavingsAccount:\n\t# The name of the constructor must be __init__.\n\t# Default constructor — does not have parameters\n\tdef __init__(self):\n\t\tpass\n\t\n\t# Parameterised constructor with parameters\n\tdef __init__(self, no, name, bal):\n\t\tself.accountNo = no\n\t\tself.accountName = name\n\t\tself.balance = bal\n```\n\n## Printing methods\n\nBecause we won't know what exactly to print out, we may need to define what to print out when a language's printing function is called on an object of a class. The name of the function varies across programming languages.\n\n- C#\n```c#\nclass SavingsAccount {\n\t// The name of the function must be ToString.\n\tpublic override string ToString()\n\t{\n\t\treturn \"AccountNo: \" + AccountNo +\n\t\t\t\" AccountName: \" + AccountName +\n\t\t\t\" Balance: \" + Balance;\n\t}\n}\n```\n- Python\n```python\nclass SavingsAccount:\n\t# The name of the function must be __str__.\n\tdef __str__(self):\n\t\treturn \"AccountNo: \" + self.accountNo +\n\t\t\t\" AccountName: \" + self.accountName +\n\t\t\t\" Balance: \" + self.balance\n```","lastmodified":"2022-11-07T10:28:46.862868422Z","tags":null},"/technologies/programming/encapsulation":{"title":"Encapsulation","content":"\nRefers to the process of enclosing certain information. In the context of object-oriented programming, encapsulation refers to hiding irrelevant data (e.g., variables and methods) outside of a class.\n\n# Access specifiers\n\nMany OOP-based languages utilise access specifiers to implement encapsulation in code. The following are some examples of certain access specifiers used:\n\n| Access specifier | Visible to objects of other classes _within the namespace_ | Visible to objects of child classes _within the namespace_ | Visible to objects of other classes _outside the namespace_ | Visible to objects of child classes _outside the namespace_ |\n|:-:|:-:|:-:|:-:|:-:|\n| `public` | **Yes** | **Yes** | **Yes** | **Yes** |\n| `private` | No | No | No | No |\n| `protected` | No | **Yes** | No | **Yes** |\n| `internal` | **Yes** | No | No | No |\n| `protected internal` | **Yes** | **Yes** | No | No |\n","lastmodified":"2022-11-07T10:28:46.862868422Z","tags":null},"/technologies/programming/object-oriented-programming":{"title":"Object-oriented programming","content":"\nA computing programming model that models a system as a collection of objects, of which each object represents a particular part of the system[^1]. Generally involves the use of [[technologies/programming/class|classes]] and objects.\n\n- Has four main concepts:\n\t- [[technologies/programming/encapsulation|encapsulation]];\n\t- [[technologies/inheritance|inheritance]];\n\t- [[technologies/classes|abstract classes and instances]]; and\n\t- [[technologies/polymorphism|polymorphism]]\n\n[^1]: [MDN Web Docs](https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects/Object-oriented_programming)","lastmodified":"2022-11-07T10:28:46.862868422Z","tags":null},"/technologies/software":{"title":"Software","content":"\nSeries of related instructions that tells the computer what tasks to perform and how to perform them. Generally, there are two types of software in a computer:\n\n- system software — software that control or maintain the operations of the computer; and\n\t- [[technologies/computers/operating-system|operating systems]] and utility programs are part of system software\n- application software — software that is designed to make users more productive or to assist them with personal tasks.\n\t- web browsers and spreadsheet software are examples of application software","lastmodified":"2022-11-07T10:28:46.862868422Z","tags":null},"/technologies/web3":{"title":"Web3","content":"\nAn idea of what a new web could be like, focused on the [[blockchain]], [[decentralisation]], and [[cryptocurrency]]. Not to be confused with Web 3.0, which is the next iteration of the [[World Wide Web]].","lastmodified":"2022-11-07T10:28:46.862868422Z","tags":null}}